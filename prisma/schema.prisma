// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Instrument {
  id             String   @id @default(cuid())
  name           String
  imageUrls      String[]
  category       Category
  discription    String?
  principle      String?
  sop            String?
  ichGuideline   String?
  procedure      String?
  advantages     String?
  limitations    String?
  specifications String?
  videoUrl       String?
  experiments    ExperimentOnInstrument[]

  createdAt DateTime @default(now())
}

enum Category {
  PHARMACEUTIC
  PHARMACOGNOSY
  PHARMACOLOGY
  PHARMACEUTICAL_CHEMISTRY
}

model Experiment {
  id          String       @id @default(cuid())
  object      String
  reference   String?
  materials   String?
  theory      String?
  procedure   String?
  observation String?
  result      String?
  chemicalReaction String?
  calculations  String?
  videoUrl    String?
  instruments ExperimentOnInstrument[]

  createdAt   DateTime @default(now())
}

model ExperimentOnInstrument {
  experiment   Experiment @relation(fields: [experimentId], references: [id])
  experimentId String
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  instrumentId String

  @@id([experimentId, instrumentId])
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String?   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime  @default(now())

  questions Question[]
  answers   Answer[]
  comments  Comment[]
  votes     Vote[]

  @@index([clerkId])
}

model Question {
  id          String    @id @default(cuid())
  title       String
  description String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  voteSum     Int       @default(0)
  votes       Vote[]
  answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
}

model Answer {
  id          String    @id @default(cuid())
  description String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  votes       Vote[]
  comments    Comment[]
  voteSum     Int       @default(0)
  commentCount Int     @default(0) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([questionId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([answerId])
  @@index([authorId])
}

model Vote {
  id         String    @id @default(cuid())
  value      Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   String?

  @@unique([userId, questionId], name: "userId_questionId")
  @@unique([userId, answerId],   name: "userId_answerId")

  @@index([questionId])
  @@index([answerId])
  @@index([userId])
}